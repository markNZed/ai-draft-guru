Add help for script type
Show script result in diff view too
Can we import libraries into th efunction? Can also return instead of await
   await import('https://cdn.jsdelivr.net/npm/lodash-es/lodash.js')
    .then(_ => {
      console.log(_.join(['Hello', 'world'], ' '));
    })
    .catch(err => console.error(err));

    return Promise.all([
        import('https://cdn.jsdelivr.net/npm/lodash-es/lodash.js'),
        import('https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js')
    ])
    .then(([lodash, axios]) => {
        console.log('Lodash version:', lodash.VERSION);
        console.log('Axios version:', axios.default.VERSION);

        // Use both libraries together
        console.log(lodash.join(['Axios', 'with', 'Lodash'], ' '));

        // Example Axios request
        axios.default.get('https://jsonplaceholder.typicode.com/posts/1')
            .then(response => {
                console.log('Axios response:', response.data);
            });
    })
    .catch(err => {
        console.error('Error loading modules:', err);
    });

Use full width so we get larger command area
Saving of prompts
Help for predefined - generated
Parallel exceution of TTS conversion
Add example to README:
// Traverse the AST and process paragraphs
for (let node of ast.children) {
  if (node.type === 'paragraph') {
    // Convert the paragraph node back to markdown
    const paragraphMarkdown = remark().stringify(node);

    // Send a command to count the number of letters in the paragraph
    const charCount = await sendCommand('Count the number of letters and return only the count', paragraphMarkdown);

    // Update the paragraph node by appending the character count to the text
    node.children.push({
      type: 'text',
      value: ` (Character count: ${charCount})`,
    });
  }
}
return ast;


Project folder with multiple documents (can be loaded for context)
Returning errors from OpenAI e.g. TTS voice missing to UI
Test all operations
Generate a name for the file that fits the script
Generate sound effects
Generate music intro/outro
Operations on selections
Integrate pre-recorded sections
Progress indicator
Context-aware prompts that take into account the current structure and content of the document.
Tests need testing

Key Components to Implement:
    Controllers: Handle HTTP requests and responses.
    Services: Contain business logic, including AI interactions.
    Routes: Define API endpoints.
    Middleware: Handle tasks like logging, error handling, and request validation.
    Utils: Utility functions and helpers.
    Config: Configuration settings and environment variables.
