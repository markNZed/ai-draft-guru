Should not need to select project
Test run on all files
  How should apply script run ? 
    Feed it a single AST but how to split on return ?
       For now just disable This

Run in dev container - what about files ?

Generate should change run button to "Run" not on file. Hide run on all button

If we force the loading of project then don't load the editor with default

Auto-save only if the content has changed 

A project could have a file with saved prompts etc

Error No hunks found in the parsed diff. 
Command history not restoring correctly
Show script result in diff view too
Can we import libraries into th efunction? Yes (could provide a helper function)
   await import('https://cdn.jsdelivr.net/npm/lodash-es/lodash.js')
    .then(_ => {
      console.log(_.join(['Hello', 'world'], ' '));
    })
    .catch(err => console.error(err));

    return Promise.all([
        import('https://cdn.jsdelivr.net/npm/lodash-es/lodash.js'),
        import('https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js')
    ])
    .then(([lodash, axios]) => {
        console.log('Lodash version:', lodash.VERSION);
        console.log('Axios version:', axios.default.VERSION);

        // Use both libraries together
        console.log(lodash.join(['Axios', 'with', 'Lodash'], ' '));

        // Example Axios request
        axios.default.get('https://jsonplaceholder.typicode.com/posts/1')
            .then(response => {
                console.log('Axios response:', response.data);
            });
    })
    .catch(err => {
        console.error('Error loading modules:', err);
    });

Saving of prompts - better on the server side I guess (so we can have predefined examples)
Parallel exceution of TTS conversion

Project folder with multiple documents (can be loaded for context)
Returning errors from OpenAI e.g. TTS voice missing to UI
Create/debug testing
Test all operations
Generate a name for the file that fits the script
Generate sound effects
https://elevenlabs.io/pricing
Generate music intro/outro
Operations on selections
Integrate pre-recorded audio
Progress indicator
Context-aware prompts that take into account the current structure and content of the document.
    Maybe a project description that prepends the system prompt.

Refactoring

Key Components to Implement:
    Controllers: Handle HTTP requests and responses.
    Services: Contain business logic, including AI interactions.
    Routes: Define API endpoints.
    Middleware: Handle tasks like logging, error handling, and request validation.
    Utils: Utility functions and helpers.
    Config: Configuration settings and environment variables.
